
[安装]

在本文件目录下，执行以下语句即可。
sudo bash install.sh




[droplet.py命令行参数用法]


python3 droplet.py [-n 服务器名称] [-t 服务器类型]
------------------------------------------------------------------------
-n，服务器名称用来辨识一台特定的droplet服务器。名称必须保证唯一。如果不指定这个参数，系统将自动分配一个唯一的名字。
-t，服务器类型用来标记服务器用途。只可取两个值，login或regular。如果不指定这个参数，默认为regular。
socialgrow主服务器自动管理脚本时，login任务会选择跑在login类型的服务器上；其他常规脚本会选择跑在regular类型。
其他参数：
    -a，监听address。默认0.0.0.0，即监听一切网卡
    -p，监听端口。默认8000
    -ri，设置向主服务器汇报状态的间隔时间。默认30秒
    -up，开启脚本时是否使用代理，默认为True，即使用。该设置会影响login脚本，或者通过预设参数运行的run脚本
    -ap，专门针对login脚本。它指明开启login脚本时如何分配代理。不指明则不使用代理。可接两个附加参数group和tag
    -nr，首次启动服务时不恢复之前的脚本
    -w，使用worker进程的方式开启服务。默认daemon方式
    -g，使用gui模式开启脚本，用于调试。默认关闭





[脚本命令行参数用法]


(1)基本语法
python3 like.py [IG用户] [IG密码] [代理地址:端口:用户:密码]
------------------------------------------------------------------------
除脚本名称外，其他参数均可不填。如果缺少必要信息，脚本运行时会在命令行询问。



python3 run.py [IG用户] [IG密码] [代理地址:端口:用户:密码] -t 任务1 [任务2] [任务3] ...
------------------------------------------------------------------------
使用run.py脚本需要指定--tasks(-t)参数。
任务名称，就是tasks文件夹里的任务文件的文件名，去掉.py后缀。




(2)功能型参数
-ap, --allocate-proxy [group] [tag]
------------------------------------------------------------------------
后台自动分配代理。可跟随group和（或）tag两个附加参数。
group表明只分配特定group的代理。如果不指定这个附加参数，或指定为"all"，则不区分group。
tag表明只分配标记为特定tag的代理。如果未不指定这个附加参数，或指定为"default"，则寻找tag为空""的代理。
ap只在参数中缺少代理时发生作用，如果命令行已经给出代理参数，或pull中包含代理，ap将不生效。
【举例1】python3 follow.py minhaodeng 12345678 -ap
系统将从proxy pool里的所有不含任何标记（tag为空）的代理中，全局优选一个代理。
【举例2】python3 like.py minhaodeng 12345678 -ap group0 premium
系统将从proxy pool里的group0这组代理中，找到标记为premium的子集，然后从这些代理中优选一个代理。



-p, --pull [field1] [field2] ...
------------------------------------------------------------------------
脚本根据IG用户名，自动从后台获取最近登录成功过的密码，代理，tag，cookies，tasks（仅run.py支持）。
pull后面可以加若干个field参数，表示具体需要pull哪些信息。其值可能为password，proxy，cookies，tasks。
如果不指明具体想pull的信息，则默认为四个参数全部获取。
如果本地已有当前IG用户的cookies，pull不会覆盖已有的cookies。
【举例1】python3 like.py minhaodeng -p
pull最近登录成功的密码、代理、cookies
【举例2】python3 run.py minhaodeng -p password cookies tasks -ap
pull最近登录成功的密码、cookies、tasks，但没说要代理。所以后面可以跟上-ap使用新代理。
【举例3】python3 run.py minhaodeng 12345678 -p -t follow
虽然pull所有信息，但其中密码"12345678"、任务"follow"已经在参数中给出，pull不会覆盖这些参数。



-pe, --pull-exclude [field1] [field2] ...
------------------------------------------------------------------------
和pull功能相同。pull-exclude同样默认获取全部信息，和pull的区别是，这里的fields值采用排除法。
【举例】python3 run.py minhaodeng -pe proxy -ap
pull最近成功登陆的信息，排除代理。然后用-ap获取新代理。



-pb, --pull-by [group1] [group2] ...
------------------------------------------------------------------------
这个参数用来给pull提供额外的指导。它代表从服务器pull信息的限制条件。其值为1个或多个group。
group的含义是，pull信息的时候，按照group来对所有登录信息分组，最终只取特定组内的最近成功登录信息。
group的值可以是version，用来区分不同版本的脚本。也可以是其他任何参数名称比如tasks。
这个参数需要和--pull联用。单独使用无效。
【举例】python3 run.py minhaodeng -p -pb version
pull最近登录成功的、使用在相同version的run.py脚本里的密码，代理，任务。



-t, --tasks task1 [task2] ...
------------------------------------------------------------------------
指定要跑的tasks。仅run.py支持。
以tasks文件夹中的任务定义文件名为参数，不加".py"后缀。
需至少指定1个任务文件。不设上限。
同一个文件中的任务，依次执行，可指定子任务的冷却时间；不同文件中的任务，相互排队。
【举例】python3 run.py minhaodeng -p -t follow like-asia
脚本将pull最近登录参数，并且混合执行tasks/follow.py和tasks/like-asia.py中定义的任务。



-rc, --retry-credentials [count]
------------------------------------------------------------------------
该参数指出，在提供了错误的用户名、密码的时候，是否进行下一轮重试。
改参数的附加参数count指明允许的重试次数。
如果主参数不存在，count设定为0，即不重试；如果主参数存在但count不存在，默认为-1，即无限次。
在通过浏览器在云上开启脚本的情况下，如果对密码无把握，可以通过关闭重试来防止云上的脚本无限等待新密码。
如果参数开启，脚本默认通过命令行询问新的账号密码。



-rp, --retry-proxy [count]
------------------------------------------------------------------------
该参数表明，在代理无法连接网络的时候，进行重试。
改参数的附加参数count指明允许的重试次数。
如果主参数不存在，count设定为0，即不重试；如果主参数存在但count不存在，默认为-1，即无限次。
如果关闭重试，那么在登录前，如果检测到代理（或本地网络）无效，脚本将直接退出。
如果参数开启，脚本默认通过命令行询问新的账号密码。
如果-ap参数同时存在，那就不询问命令行，直接请求后台重新分配代理。



-rl, --retry-login [count]
------------------------------------------------------------------------
该参数表明，在因为疑难杂症，比如可能连接被instagram屏蔽的时候，是否进行重试整个login流程。
改参数的附加参数count指明允许的重试次数。
如果主参数不存在，count设定为0，即不重试；如果主参数存在但count不存在，默认为-1，即无限次。
不同于上述密码重试和代理重试的地方是，登录重试相当于整个进程的重启：
包括初始化环境，重新打开浏览器，重新连接代理，重新访问login页面。



-nc, --no-cookies
------------------------------------------------------------------------
如果此参数存在，则脚本会忽视已经存在的cookies，包括本地cookies，也包括-p带来的cookies。
因此，脚本会强制进行一次全新的登录。




(3)其他参数
-c, --chrome
------------------------------------------------------------------------
使用chrome，不支持代理。此参数缺省时默认用firefox。



-g, --gui
------------------------------------------------------------------------
使用gui模式。此参数缺省时默认为headless模式。



-q, --query
------------------------------------------------------------------------
一旦遇到需要从命令行输入任何信息的情况，改为从数据库查询相应字段的最新值。
用于和前端配合。



-m, --merge [instance]
------------------------------------------------------------------------
把服务器上当前IG用户最近的一条log记录，作为此脚本的log目标。
此参数存在时，只为从未跑过的IG用户创建log记录。只要曾经跑过，就自动延续最近活跃的log记录。
此参数不存在时，任何脚本参数的变动都会导致新log记录的产生。
此参数可跟随一个附加参数instance。
如果附加参数存在，则脚本log延续到指定instance的log记录，而非自动延续最近活跃的那条。
**如果因此导致两个正在运行的脚本共享同一条log记录，那它们将无法正常接收在线发送的任务。



-s, --silent
------------------------------------------------------------------------
在本地terminal不打印任何信息。仅仅向服务器汇报log。
当多进程共享公共IO流例如stdout时，-s能杜绝deadlock的发生；
由于不与标准流交互，在脚本以子进程形式运行时，也能轻微减少没必要的系统资源占用。



-user, --username
-pass, --password
-proxy, --proxy
------------------------------------------------------------------------
为用户名，密码，代理额外提供三个可用于任意位置的便捷参数。
如果这三个参数和命令行前三个位置的用户名，密码，代理同时出现，以这三个为准。



-v, --version [string]
-n, --name [string]
-i, --instance [string]
------------------------------------------------------------------------
用于标记脚本。在命令行处指定的这些参数，会覆盖文件中env.config()里的声明。
三者都可以被--pull识别用以分组。


